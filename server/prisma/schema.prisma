generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Address {
  userId      String  @unique
  voivodeship String
  district    String
  town        String
  street      String?
  residence   String
  postcode    String
  User        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  itemId    String
  createdAt DateTime @default(now())
  Item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id   String @id @default(uuid())
  name String
  Item Item[]
}

model Item {
  id          String      @id @default(uuid())
  name        String
  price       Float
  stock       Int
  description String      @db.VarChar(65535)
  createdAt   DateTime    @default(now())
  categoryId  String?
  producentId String?
  image       String
  type        Int         @default(0)
  dlcId       String?
  Cart        Cart[]
  Category    Category?   @relation(fields: [categoryId], references: [id])
  Item        Item?       @relation("ItemToItem", fields: [dlcId], references: [id])
  other_Item  Item[]      @relation("ItemToItem")
  Producent   Producent?  @relation(fields: [producentId], references: [id])
  OrderItem   OrderItem[]
  ItemCode    ItemCode[]
}

model Personal {
  userId   String @unique
  name     String
  lastname String
  phone    String
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Producent {
  id   String @id @default(uuid())
  name String
  Item Item[]
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  role      Role      @default(USER)
  password  String
  createdAt DateTime  @default(now())
  Address   Address?
  Cart      Cart[]
  Personal  Personal?
  Order     Order[]
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  createdAt   DateTime    @default(now())
  totalAmount Float
  status      OrderStatus @default(PENDING)
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderItem   OrderItem[]
}

model OrderItem {
  id       String @id @default(uuid())
  orderId  String
  itemId   String
  quantity Int
  subtotal Float
  Order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Item     Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model ItemCode {
  id     String @id @default(uuid())
  itemId String
  code   String
  Item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
}
